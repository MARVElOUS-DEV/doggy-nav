# Multi-stage build for doggy-nav-main (Next.js Frontend)
FROM node:20-alpine AS base

# Install pnpm
RUN npm install -g pnpm

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Copy package.json and lock files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/doggy-nav-main/package.json ./packages/doggy-nav-main/
COPY packages/doggy-nav-server/package.json ./packages/doggy-nav-server/
COPY packages/doggy-nav-admin/package.json ./packages/doggy-nav-admin/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/packages/doggy-nav-main/node_modules ./packages/doggy-nav-main/node_modules

# Copy source code
COPY packages/doggy-nav-main ./packages/doggy-nav-main
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Build the application
WORKDIR /app/packages/doggy-nav-main
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

RUN pnpm build

# Production image, copy all the files and run Next.js
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create a non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/packages/doggy-nav-main/dist ./packages/doggy-nav-main/dist
COPY --from=builder /app/packages/doggy-nav-main/public ./packages/doggy-nav-main/public
COPY --from=builder /app/packages/doggy-nav-main/next.config.ts ./packages/doggy-nav-main/
COPY --from=builder /app/packages/doggy-nav-main/package.json ./packages/doggy-nav-main/
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/packages/doggy-nav-main/node_modules ./packages/doggy-nav-main/node_modules

USER nextjs

EXPOSE 3001

ENV PORT=3001
ENV HOSTNAME="0.0.0.0"

WORKDIR /app/packages/doggy-nav-main
CMD ["pnpm", "start"]