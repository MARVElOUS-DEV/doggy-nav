# Multi-stage build for doggy-nav-admin (UmiJS Admin Panel)
FROM node:20-alpine AS base

# Install pnpm globally
RUN npm install -g pnpm

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Copy package.json and lock files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/doggy-nav-admin/package.json ./packages/doggy-nav-admin/
COPY packages/doggy-nav-main/package.json ./packages/doggy-nav-main/
COPY packages/doggy-nav-server/package.json ./packages/doggy-nav-server/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Build the source code
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/packages/doggy-nav-admin/node_modules ./packages/doggy-nav-admin/node_modules

# Copy source code
COPY packages/doggy-nav-admin ./packages/doggy-nav-admin
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml tsconfig.json ./

# Build the application
ENV NODE_ENV=production
RUN pnpm -F doggy-nav-admin build

# Production image with nginx
FROM nginx:1.25-alpine AS runner

# Copy built application
COPY --from=builder /app/packages/doggy-nav-admin/dist /usr/share/nginx/html

# Copy nginx configuration template
COPY deploy/nginx-admin.conf /etc/nginx/templates/default.conf.template

EXPOSE 8080
ENV DOGGY_SERVER=http://localhost:3002

# The nginx image automatically processes templates in /etc/nginx/templates/
# and substitutes environment variables at startup
CMD ["nginx", "-g", "daemon off;"]